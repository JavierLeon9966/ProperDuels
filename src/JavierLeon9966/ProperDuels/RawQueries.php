<?php /** @noinspection PhpPropertyCanBeReadonlyInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */
/** @noinspection PhpUselessTrailingCommaInspection */

/*
 * Auto-generated by libasynql-fx
 * Created from stmt.sql, stmt.sql
 */

declare(strict_types=1);

namespace JavierLeon9966\ProperDuels;

use Generator;
use JavierLeon9966\ProperDuels\libs\_92d1364612b7d666\poggit\libasynql\DataConnector;
use JavierLeon9966\ProperDuels\libs\_92d1364612b7d666\SOFe\AwaitGenerator\Await;

final class RawQueries{
	public function __construct(private DataConnector $conn) {}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:88
	 * - ./resources/sqlite/stmt.sql:91
	 * @param string $name
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function deleteArena(string $name, ) : Generator {
		$this->conn->executeChange("properduels.delete.arena", ["name" => $name, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:83
	 * - ./resources/sqlite/stmt.sql:86
	 * @param string $name
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function deleteKit(string $name, ) : Generator {
		$this->conn->executeChange("properduels.delete.kit", ["name" => $name, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:129
	 * - ./resources/sqlite/stmt.sql:132
	 * @param string $name
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getArena(string $name, ) : Generator {
		$this->conn->executeSelect("properduels.get.arena", ["name" => $name, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:124
	 * - ./resources/sqlite/stmt.sql:127
	 * @param string $name
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getKit(string $name, ) : Generator {
		$this->conn->executeSelect("properduels.get.kit", ["name" => $name, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:136
	 * - ./resources/sqlite/stmt.sql:139
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getRandomArena() : Generator {
		$this->conn->executeSelect("properduels.get_random.arena", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:141
	 * - ./resources/sqlite/stmt.sql:144
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function getRandomKit() : Generator {
		$this->conn->executeSelect("properduels.get_random.kit", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:26
	 * - ./resources/sqlite/stmt.sql:29
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function initArenas() : Generator {
		$this->conn->executeChange("properduels.init.arenas", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/sqlite/stmt.sql:6
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function initForeignKeys() : Generator {
		$this->conn->executeChange("properduels.init.foreign_keys", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:11
	 * - ./resources/sqlite/stmt.sql:14
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function initKits() : Generator {
		$this->conn->executeChange("properduels.init.kits", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:155
	 * - ./resources/sqlite/stmt.sql:158
	 * @param int $offset
	 * @param int $limit
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function listArenas(int $offset, int $limit, ) : Generator {
		$this->conn->executeSelect("properduels.list.arenas", ["offset" => $offset, "limit" => $limit, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:149
	 * - ./resources/sqlite/stmt.sql:152
	 * @param int $offset
	 * @param int $limit
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function listKits(int $offset, int $limit, ) : Generator {
		$this->conn->executeSelect("properduels.list.kits", ["offset" => $offset, "limit" => $limit, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:34
	 * - ./resources/sqlite/stmt.sql:37
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function loadArenas() : Generator {
		$this->conn->executeSelect("properduels.load.arenas", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:31
	 * - ./resources/sqlite/stmt.sql:34
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, list<array<string, mixed>>>
	 */
	public function loadKits() : Generator {
		$this->conn->executeSelect("properduels.load.kits", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:76
	 * - ./resources/sqlite/stmt.sql:79
	 * @param string $name
	 * @param string $levelName
	 * @param float $firstSpawnPosX
	 * @param float $firstSpawnPosY
	 * @param float $firstSpawnPosZ
	 * @param float $secondSpawnPosX
	 * @param float $secondSpawnPosY
	 * @param float $secondSpawnPosZ
	 * @param ?string $kit
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function registerArena(string $name, string $levelName, float $firstSpawnPosX, float $firstSpawnPosY, float $firstSpawnPosZ, float $secondSpawnPosX, float $secondSpawnPosY, float $secondSpawnPosZ, ?string $kit, ) : Generator {
		$this->conn->executeInsert("properduels.register.arena", ["name" => $name, "levelName" => $levelName, "firstSpawnPosX" => $firstSpawnPosX, "firstSpawnPosY" => $firstSpawnPosY, "firstSpawnPosZ" => $firstSpawnPosZ, "secondSpawnPosX" => $secondSpawnPosX, "secondSpawnPosY" => $secondSpawnPosY, "secondSpawnPosZ" => $secondSpawnPosZ, "kit" => $kit, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:43
	 * - ./resources/sqlite/stmt.sql:46
	 * @param string $name
	 * @param string $armor
	 * @param string $inventory
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function registerKit(string $name, string $armor, string $inventory, ) : Generator {
		$this->conn->executeInsert("properduels.register.kit", ["name" => $name, "armor" => $armor, "inventory" => $inventory, ], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:117
	 * - ./resources/sqlite/stmt.sql:120
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function resetArenas() : Generator {
		$this->conn->executeChange("properduels.reset.arenas", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}

	/**
	 * <h4>Declared in:</h4>
	 * - ./resources/mysql/stmt.sql:100
	 * - ./resources/sqlite/stmt.sql:103
	 * @return Generator<mixed, 'all'|'once'|'race'|'reject'|'resolve'|array{'resolve'}|Generator<mixed, mixed, mixed, mixed>|null, mixed, int>
	 */
	public function resetKits() : Generator {
		$this->conn->executeChange("properduels.reset.kits", [], yield Await::RESOLVE, yield Await::REJECT);
		return yield Await::ONCE;
	}
}